{"version":3,"sources":["Hooks/api.js","Hooks/use-http.js","App.js","Components/Context/ContextProvider.js","index.js"],"names":["FirebaseApi","getAuthentication","loginCredential","a","fetch","method","body","JSON","stringify","headers","response","ok","Error","json","data","success","registered","userId","localId","sendUpdate","updatedData","items","fetchItems","message","key","transformedItems","itemObj","id","push","HTTPReducer","state","action","type","status","error","value","useHTTP","RequestFunction","startWithPending","useReducer","httpState","disptach","sendRequest","useCallback","ResData","Header","lazy","Home","Post","MainPage","initial","App","useSelector","changed","val","localStorage","getItem","useState","isLoggedIn","setIsLoggedIn","showPost","setshowPost","ismanPageOpen","setismainPageOpen","useEffect","ShowSignIn","ShowSignUp","onShowPost","onLogout","setItem","clear","window","location","reload","onSignUp","onSignIn","localUID","defaultState","store","createStore","payload","existingPostId","findIndex","post","existingPost","updatedpost","list","filter","ReactDOM","render","fallback","document","getElementById"],"mappings":"8OAAMA,EAAc,mDAGPC,EAAiB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACLC,MAAM,GAAD,OAHjB,qHAGiC,CACxCC,OAAS,OACTC,KAAOC,KAAKC,UAAUN,GACtBO,QAAU,CACP,eAAgB,sBALK,WACtBC,EADsB,QAQfC,GARe,sBASlB,IAAIC,MAAM,gBATQ,uBAWTF,EAASG,OAXA,cAWtBC,EAXsB,yBAYrB,CACHC,QAAUD,EAAKE,aAAc,EAC7BC,OAASH,EAAKI,UAdU,2CAAH,sDAkBjBC,EAAU,uCAAG,WAAOC,GAAP,SAAAjB,EAAA,sEACCC,MAAM,GAAD,OAAIJ,EAAJ,kBAAyBoB,EAAYH,OAArC,SAAqD,CAC7EZ,OAAS,MACTC,KAAOC,KAAKC,UAAUY,EAAYC,OAClCZ,QAAU,CACP,eAAgB,sBALD,iBAQTE,GARS,sBASZ,IAAIC,MAAM,oBATE,2CAAH,sDAaVU,EAAU,uCAAG,WAAOF,GAAP,uBAAAjB,EAAA,sEACCC,MAAM,GAAD,OAAIJ,EAAJ,kBAAyBoB,EAAYH,OAArC,UADN,cAChBP,EADgB,gBAEHA,EAASG,OAFN,UAEhBC,EAFgB,OAIjBJ,EAASC,GAJQ,sBAKd,IAAIC,MAAME,EAAKS,SAAW,wBALZ,OAUtB,IAAWC,KAFLC,EAAmB,GAEPX,EACVY,EADgB,aAEpBC,GAAIH,GACDV,EAAKU,IAEVC,EAAiBG,KAAKF,GAfF,yBAkBfD,GAlBe,4CAAH,uD,iFChCjBI,EAAc,SAACC,EAAQC,GACzB,MAAmB,YAAhBA,EAAOC,KACC,CACHC,OAAS,UACTnB,KAAOgB,EAAMhB,KACboB,MAAQJ,EAAMI,OAGC,YAAhBH,EAAOC,KACC,CACHC,OAAS,YACTnB,KAAOiB,EAAOjB,KACdoB,MAAQJ,EAAMI,OAGH,UAAhBH,EAAOC,KACC,CACHC,OAAS,YACTnB,KAAOgB,EAAMhB,KACboB,MAAQH,EAAOI,YAJvB,GA4BQC,IAnBA,SAACC,EAAkBC,GACjC,MAA+BC,qBAAWV,EAAc,CAACI,OAASK,EAAmB,UAAY,KAAOxB,KAAO,KAAOoB,MAAQ,OAA9H,mBAAOM,EAAP,KAAmBC,EAAnB,KACQC,EAAcC,sBAAW,uCAAE,WAAO7B,GAAP,eAAAX,EAAA,6DACzBsC,EAAS,CAACT,KAAO,YADQ,kBAGEK,EAAgBvB,GAHlB,OAGf8B,EAHe,OAIrBH,EAAS,CAACT,KAAO,UAAYlB,KAAO8B,IAJf,gDAOnBH,EAAS,CAACT,KAAO,QAAUG,MAAQ,KAAMZ,SAAW,yBAPjC,yDAAF,sDAU3B,CAACc,IAEL,OAAO,aACHK,eACGF,K,iKCjCLK,EAASC,gBAAK,kBAAM,gCACpBC,EAAOD,gBAAK,kBAAM,gCAClBE,EAAOF,gBAAK,kBAAM,gCAClBG,EAAWH,gBAAK,kBAAM,sDACxBI,GAAU,EAkDCC,MAjDf,WACE,IAAM9B,EAAQ+B,aAAY,SAAAtB,GAAK,OAAIA,EAAMT,SACnCJ,EAASmC,aAAY,SAAAtB,GAAK,OAAIA,EAAMb,UACpCoC,EAAUD,aAAY,SAAAtB,GAAK,OAAIA,EAAMuB,WACpCX,EAAeN,YAAQjB,KAAvBuB,YACDY,EAA6C,MAAvCC,aAAaC,QAAQ,cACjC,EAAoCC,mBAASH,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA2CJ,oBAAUH,GAArD,mBAAMQ,EAAN,KAAsBC,EAAtB,KAyBA,OARAC,qBAAU,WACLd,EACDA,GAAU,EAEJQ,GAAcL,GACpBX,EAAY,CAACrB,MAAQA,EAAQJ,OAASA,MAEzC,CAACyC,EAAarC,EAAQqB,EAAeW,EAAUpC,IAE9C,qCACE,cAAC4B,EAAD,CACGoB,YAAa,EACbC,YAAa,EACbC,WAnBa,WAClBN,GAAaD,IAmBRQ,SAzBe,WACpBb,aAAac,QAAQ,aAAe,KACpCd,aAAae,QACbC,OAAOC,SAASC,UAuBXf,WAAYA,IAEdA,GAAcE,GAAY,cAACZ,EAAD,IAC1BU,IAAeE,GAAY,cAACb,EAAD,IAC3Be,GAAiB,cAACb,EAAD,CAAUyB,SAtBR,WACtBX,GAAmBD,IAqBsCa,SAnCtC,WACnBhB,GAAc,GACdE,GAAY,GACZE,GAAkB,U,gBCzBba,EAAWrB,aAAaC,QAAQ,UACjCqB,EAAe,CACjBxD,MAAQ,GACRJ,OAAW2D,GAAsB,GACjCvB,SAAU,GAiCCyB,EAAQC,aA/BH,WAAoC,IAAnCjD,EAAkC,uDAA1B+C,EAAe9C,EAAW,uCACnD,GAAmB,WAAhBA,EAAOC,KACN,MAAO,CACHX,MAAQS,EAAMT,MACdJ,OAASc,EAAOiD,QAChB3B,QAAUvB,EAAMuB,SAGxB,GAAmB,WAAhBtB,EAAOC,KACN,MAAO,CACLX,MAAQU,EAAOiD,QACf/D,OAASa,EAAMb,OACfoC,QAAUvB,EAAMuB,SAGtB,GAAmB,QAAhBtB,EAAOC,KAAgB,CACtB,IAAMiD,EAAiBnD,EAAMT,MAAM6D,WAAU,SAAAC,GAAI,OAAIA,EAAKxD,KAAOI,EAAOiD,QAAQrD,MAC1EyD,EAAetD,EAAMT,MAAM4D,GACjC,GAAGG,EAAc,CACd,IAAMC,EAAW,YAAOvD,EAAMT,OAE9B,OADAgE,EAAYJ,GAAkBlD,EAAOiD,QAC9B,CAAC3D,MAAQgE,EAAcpE,OAASa,EAAMb,OAASoC,SAAU,GAEnE,MAAO,CAAChC,MAAM,GAAD,mBAAMS,EAAMT,OAAZ,CAAoBU,EAAOiD,UAAW/D,OAASa,EAAMb,OAASoC,SAAU,GAEpF,GAAmB,QAAhBtB,EAAOC,KAAgB,CAC3B,IAAMsD,EAAOxD,EAAMT,MAAMkE,QAAO,SAAAJ,GAAI,OAAIA,EAAKxD,KAAOI,EAAOiD,WAC3D,MAAO,CAAC3D,MAAQiE,EAAOrE,OAASa,EAAMb,OAASoC,SAAU,GAE7D,OAAOwB,KC9BbW,IAASC,OAAO,eAAC,IAAD,CAAUX,MAAOA,EAAjB,cAAyB,cAAC,WAAD,CAAUY,SAAU,4CAApB,SAA0C,cAAC,EAAD,SAA+BC,SAASC,eAAe,W","file":"static/js/main.77d01e2c.chunk.js","sourcesContent":["const FirebaseApi = \"https://react-9e703-default-rtdb.firebaseio.com/\";\r\nconst authApi = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAZjoy8dPiBktGsrJ_4z45RCFrc-TxGnko\"\r\n\r\nexport const getAuthentication = async (loginCredential) => {\r\n     const response = await fetch(`${authApi}` , {\r\n         method : \"POST\" ,\r\n         body : JSON.stringify(loginCredential) ,\r\n         headers : {\r\n            'Content-Type': 'application/json'\r\n         }\r\n     })\r\n     if(!response.ok) {\r\n         throw new Error(\"Login Failed\")\r\n     }\r\n     const data = await response.json()\r\n     return {\r\n         success : data.registered || false,\r\n         userId : data.localId\r\n     } ;\r\n}\r\n\r\nexport const sendUpdate = async (updatedData) => {\r\n    const response = await fetch(`${FirebaseApi}/items/${updatedData.userId}.json` , { \r\n        method : \"PUT\" ,\r\n        body : JSON.stringify(updatedData.items) ,\r\n        headers : {\r\n           'Content-Type': 'application/json'\r\n        }\r\n    })\r\n    if(!response.ok) {\r\n        throw new Error(\"Send data Failed\")\r\n    }\r\n}\r\n\r\nexport const fetchItems = async (updatedData) => {\r\n    const response = await fetch(`${FirebaseApi}/items/${updatedData.userId}.json`)\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.message || 'Could not get items.');\r\n    }\r\n  \r\n    const transformedItems = [];\r\n  \r\n    for (const key in data) {\r\n      const itemObj = {\r\n        id: key,\r\n        ...data[key],\r\n      };\r\n      transformedItems.push(itemObj);\r\n    }\r\n    \r\n    return transformedItems;\r\n}","import { useCallback, useReducer } from \"react\";\r\n\r\nconst HTTPReducer = (state , action) => {\r\n    if(action.type === \"sending\") {\r\n        return {\r\n            status : \"pending\" ,\r\n            data : state.data,\r\n            error : state.error\r\n        }\r\n    }\r\n        if(action.type === \"success\") {\r\n            return {\r\n                status : \"completed\" ,\r\n                data : action.data ,\r\n                error : state.error\r\n            }\r\n        }\r\n        if(action.type === \"error\") {\r\n            return {\r\n                status : \"completed\",\r\n                data : state.data ,\r\n                error : action.value\r\n            }\r\n        }\r\n}\r\n\r\nconst useHTTP = (RequestFunction , startWithPending) => {\r\n  const [httpState , disptach] = useReducer(HTTPReducer , {status : startWithPending ? \"pending\" : null , data : null , error : null} );\r\n    const sendRequest = useCallback( async (data) => {\r\n            disptach({type : \"sending\"})\r\n            try {\r\n                const ResData =  await RequestFunction(data);\r\n                disptach({type : \"success\" , data : ResData})\r\n             }\r\n             catch(error) {\r\n                  disptach({type : \"error\" , value : error.message || \"something went wrong\"})\r\n             }\r\n           \r\n    } , [RequestFunction]);\r\n\r\n    return {\r\n        sendRequest ,\r\n        ...httpState\r\n    }\r\n}\r\n export default useHTTP;","import React, {lazy, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./App.css\";\n// import Header from \"./Components/Header/Header\";\n// import Home from \"./Components/Home/Home\";\n// import Post from \"./Components/Home/Post/Post\";\n// import MainPage from \"./Components/MainScreen/MainPage\";\nimport { sendUpdate } from \"./Hooks/api\";\nimport useHTTP from \"./Hooks/use-http\";\nconst Header = lazy(() => import(\"./Components/Header/Header\"))\nconst Home = lazy(() => import(\"./Components/Home/Home\"))\nconst Post = lazy(() => import(\"./Components/Home/Post/Post\"))\nconst MainPage = lazy(() => import(\"./Components/MainScreen/MainPage\"))\nlet initial = true;\nfunction App() {\n  const items = useSelector(state => state.items);\n  const userId = useSelector(state => state.userId);\n  const changed = useSelector(state => state.changed);\n  const {sendRequest} = useHTTP(sendUpdate)\n  const val = localStorage.getItem(\"isLoggedIn\") === \"1\"; \n  const [isLoggedIn, setIsLoggedIn] = useState(val);\n  const [showPost, setshowPost] = useState(false);\n  const[ismanPageOpen , setismainPageOpen] = useState(!val)\n  const LoginHandler = () => {\n    setIsLoggedIn(true);\n    setshowPost(false);\n    setismainPageOpen(false)\n  };\n  const LogoutHandler = () => {\n    localStorage.setItem(\"isLoggedIn\" , \"0\");\n    localStorage.clear();\n    window.location.reload();\n  };\n  const PostHandler = () => {\n    setshowPost(!showPost)\n  };\n  const mainPageHandler = () => {\n    setismainPageOpen(!ismanPageOpen)\n  }\n  useEffect(() => {\n    if(initial) {\n      initial = false;\n    }\n    else if(isLoggedIn && changed) {\n      sendRequest({items : items , userId : userId})\n    }\n },[isLoggedIn , items , sendRequest  , changed , userId] );\n  return (\n    <> \n      <Header\n         ShowSignIn ={false}\n         ShowSignUp ={false}\n         onShowPost={PostHandler}\n         onLogout={LogoutHandler}\n         isLoggedIn={isLoggedIn}\n      />\n      {isLoggedIn && showPost && <Post />}\n      {isLoggedIn && !showPost && <Home/>}\n      {ismanPageOpen && <MainPage onSignUp={mainPageHandler} onSignIn={LoginHandler} />}\n      </>\n  );\n}\n\nexport default App;\n","import { createStore } from \"@reduxjs/toolkit\"\n   const localUID = localStorage.getItem(\"userId\");\n  const defaultState = {\n      items : [] ,\n      userId : !!localUID ? localUID : \"\" ,\n      changed : false\n  }\n  const postReducer = (state = defaultState , action) => {\n      if(action.type === \"LOGGER\") {\n          return {\n              items : state.items ,\n              userId : action.payload,\n              changed : state.changed\n          }\n      }\n      if(action.type === \"UPDATE\") {\n          return {\n            items : action.payload,\n            userId : state.userId,\n            changed : state.changed\n          }\n      }\n      if(action.type === \"ADD\") {\n          const existingPostId = state.items.findIndex(post => post.id === action.payload.id)\n          const existingPost = state.items[existingPostId];\n          if(existingPost) {\n             const updatedpost = [...state.items]\n             updatedpost[existingPostId] = action.payload;\n             return {items : updatedpost , userId : state.userId , changed : true}\n          }\n          return {items: [...state.items , action.payload] , userId : state.userId , changed : true};\n      }\n      else if(action.type === \"DEL\") {\n          const list = state.items.filter(post => post.id !== action.payload)\n          return {items : list , userId : state.userId , changed : true}\n      }\n      return defaultState;\n  }\n    export const store = createStore(postReducer);\n","import React , {Suspense} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./Components/Context/ContextProvider\";\nimport { Provider } from \"react-redux\";\nReactDOM.render(<Provider store={store}> <Suspense fallback={<div>Loading..</div>}><App /></Suspense></Provider>, document.getElementById(\"root\"));\n"],"sourceRoot":""}